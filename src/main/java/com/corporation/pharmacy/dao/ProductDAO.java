package com.corporation.pharmacy.dao;

import java.util.List;
import java.util.Set;

import com.corporation.pharmacy.dao.exception.DaoException;
import com.corporation.pharmacy.entity.LocalProductInfo;
import com.corporation.pharmacy.entity.LocaleType;
import com.corporation.pharmacy.entity.Product;
import com.corporation.pharmacy.entity.dto.LocalizedProduct;

/**
 * The Interface ProductDAO.
 * 
 * Defines methods for work with products.
 */
public interface ProductDAO {

    // ADD operations

    /**
     * Adds a new product consisting non localized (non String) information to the
     * data base. Returns product id generated by the data base.
     *
     * @param localizedProduct
     *            the localized product
     * @return the id of added product generated by the data base
     * @throws DaoException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    Integer addProduct(LocalizedProduct localizedProduct) throws DaoException;

    /**
     * Adds product info in the different locales to the Product with this id.
     *
     * @param productInfoForDifferentLocales
     *            product info in the different locales (languages)
     * @param idProduct
     *            the id product
     * @throws DaoException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    void addLocalProductInfo(List<LocalProductInfo> productInfoForDifferentLocales, Integer idProduct) throws DaoException;

    // GET operations

    /**
     * Gets the product by id for this locale.
     *
     * @param locale
     *            the locale (language)
     * @param idProduct
     *            the id product
     * @return the product consisting info according defined locale
     * @throws DaoException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    Product getProduct(LocaleType locale, Integer idProduct) throws DaoException;

    /**
     * Gets the products List for current page, according defined quantity of items
     * per page and locale (language) .
     *
     * @param locale
     *            the locale (language)
     * @param currentPage
     *            the current page
     * @param itemsPerPage
     *            the items per page
     * @return the products for current page consisting info according defined
     *         locale
     * @throws DaoException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    List<Product> getProducts(LocaleType locale, int currentPage, int itemsPerPage) throws DaoException;

    /**
     * Gets the total count of products that there are in the data base in this
     * <code>locale</code>.
     *
     * @param locale
     *            the locale (language)
     * @return the total count of products in the data base in the defined locale
     * @throws DaoException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    int getProductTotalCount(LocaleType locale) throws DaoException;

    /**
     * Gets the List of products from the data base by their <code>ids</code>
     * consisting info according with defined <code>locale</code>.
     *
     * @param locale
     *            the locale (language)
     * @param productsId
     *            the products id
     * @return products found by their ids in the data base and consisting info
     *         according with defined <code>locale</code>.
     * @throws DaoException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    List<Product> getProductsById(LocaleType locale, Set<Integer> productsId) throws DaoException;

    /**
     * Finds products by name. If <code>includingAnalogs</code> is true to the List
     * of found products will be also included analogues by the non patent name of
     * the product. If <code>includingAnalogs</code> is false the searching will be
     * in strict accordance with the defined <code>product name</code>. Returns the
     * List of found products. The List will be empty if no one product has been
     * found.
     *
     * @param productName
     *            the product name
     * @param includingAnalogs
     *            the boolean parameter defines if in the List of found products
     *            will be also included analogues found by the non patent name of
     *            the product.
     * @return the List of found products. The List will be empty if no one product
     *         has been found.
     * @throws DaoException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    List<Product> findProductsByName(String productName, boolean includingAnalogs) throws DaoException;

    /**
     * Finds products by sounding. If <code>includingAnalogs</code> is true to the
     * List of found products will be also included analogues by the non patent name
     * of the product. If <code>includingAnalogs</code> is false the searching will
     * not include analogues. Returns the List of found products. The List will be
     * empty if no one product has been found.
     *
     * @param productName
     *            the product name
     * @param includingAnalogs
     *            the boolean parameter defines if in the List of found products
     *            will be also included analogues found by the non patent name of
     *            the product.
     * @return the List of found products. The List will be empty if no one product
     *         has been found
     * @throws DaoException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    List<Product> findProductsBySounding(String productName, boolean includingAnalogs) throws DaoException;

    // UPDATE operations

    /**
     * Updates all info about the product.
     *
     * @param product
     *            the product
     * @throws DaoException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    void updateProduct(Product product) throws DaoException;

    /**
     * Decrease quantity of products in the data base on the quantity of products
     * that was buyed by user with this <code>id</code>. .
     *
     * @param idUser
     *            the id of user
     * @throws DaoException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    void decreaseQuantityOnBuyedProducts(Integer idUser) throws DaoException;

}
