package com.corporation.pharmacy.dao.mysql.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.corporation.pharmacy.dao.UserDAO;
import com.corporation.pharmacy.dao.connection.ConnectionPool;
import com.corporation.pharmacy.dao.connection.ConnectionPoolException;
import com.corporation.pharmacy.dao.exception.DaoException;
import com.corporation.pharmacy.dao.mysql.AbstractDAO;
import com.corporation.pharmacy.entity.Role;
import com.corporation.pharmacy.entity.User;

/**
 * Defines methods for working with 'user' data base table.
 */
public class UserDAOImpl extends AbstractDAO implements UserDAO {

    private static final Logger LOGGER = LogManager.getLogger(UserDAOImpl.class);

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /** MySQL Queries */

    private static final String IS_EMAIL_OR_LOGIN_EXIST = "SELECT EXISTS(SELECT 1 FROM `users` WHERE `email`=? OR `login`=?)";
    private static final String ADD_USER = "INSERT INTO `users` (`email`, `login`, `password`) VALUES (?, ?, ?)";
    private static final String SET_USER_FULL_INFO = "UPDATE `users` SET `name`=?, `middlename`=?, `surname`=?, `address`=?, `passport`=?, `telephone`=? WHERE `id_user` = ?;";
    private static final String GET_USER = "SELECT `id_user`, `login`, `role` FROM `users` JOIN `roles` USING (`id_role`) WHERE `password`= ? AND (`email`=? OR `login`= ?);";
    private static final String GET_USER_NAME = "SELECT `name` FROM `users` WHERE `id_user`= ?;";

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /** Defines the order of table columns */

    private static final int ID_USER = 1;
    private static final int LOGIN = 2;
    private static final int ROLE = 3;

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Instantiates a new UserDAOImpl for non transactional operations.
     */
    public UserDAOImpl() {
    }

    /**
     * Instantiates a new UserDAOImpl for transactional operations.
     *
     * @param connection
     *            the connection that can be transferred between different DAO
     */
    public UserDAOImpl(Connection connection) {
        super(connection);
    }

    /**
     * Adds a new user to the data base. Returns the id of this user generated by
     * the data base.
     *
     * @param user
     *            the user
     * @return the id of added user
     * @throws DaoException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    @Override
    public Integer addUser(User user) throws DaoException {
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet rs = null;
        try {
            connection = getConnection();
            statement = connection.prepareStatement(ADD_USER, Statement.RETURN_GENERATED_KEYS);
            statement.setString(1, user.getEmail());
            statement.setString(2, user.getLogin());
            statement.setString(3, user.getPassword());
            statement.executeUpdate();

            rs = statement.getGeneratedKeys();
            rs.next();
            int idUser = rs.getInt(1);
            return idUser;
        } catch (SQLException | ConnectionPoolException e) {
            throw new DaoException("Exception during adding user to table 'user' in DB.", e);
        } finally {
            try {
                closeNonTransactionalConnection(connection);
                ConnectionPool.getInstance().closeDBResources(rs, statement);
            } catch (SQLException e) {
                LOGGER.warn("Exception during closing DB resources.", e);
            }
        }
    }

    /**
     * Checks if the email or login exists already in the data base. Returns
     * <code>true<\code> if exists, <code>false<\code> if not.
     *
     * @param user
     *            the user object consisting email and login as fields
     * @return true if email or login exists in data base, false if neither email,
     *         nor login exists
     * @throws DaoException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    @Override
    public boolean isEmailOrLoginExists(User user) throws DaoException {
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet rs = null;
        try {
            connection = getConnection();
            statement = connection.prepareStatement(IS_EMAIL_OR_LOGIN_EXIST);
            statement.setString(1, user.getEmail());
            statement.setString(2, user.getLogin());
            rs = statement.executeQuery();
            rs.next();
            boolean isEmailOrLoginExists = rs.getBoolean(1);
            return isEmailOrLoginExists;
        } catch (SQLException | ConnectionPoolException e) {
            throw new DaoException("Exception during checking of existing email or login in DB.", e);
        } finally {
            try {
                closeNonTransactionalConnection(connection);
                ConnectionPool.getInstance().closeDBResources(rs, statement);
            } catch (SQLException e) {
                LOGGER.warn("Exception during closing DB resources.", e);
            }
        }
    }

    /**
     * Gets the user by login or email and password. Returns null if the user with
     * such parameters doesn't exist.
     *
     * @param loginOrEmail
     *            <code>String</code> representing a login or email
     * @param password
     *            the password
     * @return the user object if user with such parameters exists, null if not
     *         exists
     * @throws DaoException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    @Override
    public User getUser(String loginOrEmail, String password) throws DaoException {
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet rs = null;
        try {
            connection = getConnection();
            statement = connection.prepareStatement(GET_USER);
            statement.setString(1, password);
            statement.setString(2, loginOrEmail);
            statement.setString(3, loginOrEmail);
            rs = statement.executeQuery();
            rs.next();
            if (rs.getRow() == 0) {
                return null;
            }
            User user = formUser(rs);
            return user;
        } catch (SQLException | ConnectionPoolException e) {
            throw new DaoException("Exception during getting user by login(email) and password from DB.", e);
        } finally {
            try {
                closeNonTransactionalConnection(connection);
                ConnectionPool.getInstance().closeDBResources(rs, statement);
            } catch (SQLException e) {
                LOGGER.warn("Exception during closing DB resources.", e);
            }
        }
    }

    /**
     * Gets the user name by the specified id.
     *
     * @param idUser
     *            the id of user
     * @return the user name
     * @throws DaoException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    @Override
    public String getUserName(Integer idUser) throws DaoException {
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet rs = null;
        try {
            connection = getConnection();
            statement = connection.prepareStatement(GET_USER_NAME);
            statement.setInt(1, idUser);
            rs = statement.executeQuery();
            rs.next();
            String name = rs.getString(1);
            return name;
        } catch (SQLException | ConnectionPoolException e) {
            throw new DaoException("Exception during getting user name from DB.", e);
        } finally {
            try {
                closeNonTransactionalConnection(connection);
                ConnectionPool.getInstance().closeDBResources(rs, statement);
            } catch (SQLException e) {
                LOGGER.warn("Exception during closing DB resources.", e);
            }
        }
    }

    /**
     * Sets to existing user additional info. The user should have been added
     * already before using this method.
     *
     * @param user
     *            consisting additional info
     * @throws DaoException
     *             the exception during getting connection with data base or during
     *             working with data base.
     */
    @Override
    public void setUserFullInfo(User user) throws DaoException {
        Connection connection = null;
        PreparedStatement statement = null;
        try {
            connection = getConnection();
            statement = connection.prepareStatement(SET_USER_FULL_INFO);
            statement.setString(1, user.getName());
            statement.setString(2, user.getMiddleName());
            statement.setString(3, user.getSurname());
            statement.setString(4, user.getAdress());
            statement.setString(5, user.getPassport());
            statement.setString(6, user.getTelephone());
            statement.setInt(7, user.getIdUser());
            statement.executeUpdate();
        } catch (SQLException | ConnectionPoolException e) {
            throw new DaoException("Exception during adding info about user to table 'user' in DB.", e);
        } finally {
            try {
                closeNonTransactionalConnection(connection);
                ConnectionPool.getInstance().closeDBResources(statement);
            } catch (SQLException e) {
                LOGGER.warn("Exception during closing DB resources.", e);
            }
        }
    }

    private User formUser(ResultSet rs) throws SQLException {
        User user = new User();
        user.setIdUser(rs.getInt(ID_USER));
        user.setLogin(rs.getString(LOGIN));
        user.setRole(Role.valueOf(rs.getString(ROLE)));
        return user;
    }

}
